name: Report-By-Comment
env:
  AWS_REGION: ap-south-1
  AWS_BUCKET_NAME: "chesktyler-reports"
  USER_LOGIN: ${{ github.event.issue.user.login }}

on:
  issue_comment:
    types: [ created ]

permissions:
  contents: read
  actions: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  check_pr_status:
    if: |
      github.event.issue.pull_request
           && (startsWith(github.event.comment.body, 'Github, generate report for ')
              || startsWith(github.event.comment.body, 'GitHub, generate report for '))
    runs-on: ubuntu-latest
    steps:
      - name: Check PR status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.issue.pull_request.url }}
        run: |
          PR_STATE=$(curl --fail-with-body -s -H "Authorization: token $GITHUB_TOKEN" \
                     -H "Accept: application/vnd.github.v3+json" \
                     "$PR_URL" | jq -r .state)
          if [ "$PR_STATE" != "open" ]; then
            echo "PR is not active"
            exit 1
          fi

  parse_comment:
    runs-on: ubuntu-latest
    needs: check_pr_status
    outputs:
      config_bundle_path: ${{ steps.parse.outputs.config_bundle_path }}
      config_link: ${{ steps.set_links.outputs.config_link }}
      projects_link: ${{ steps.set_links.outputs.projects_link }}
      branch: ${{ steps.set_branch.outputs.ref }}
      commit_sha: ${{ steps.set_branch.outputs.commit_sha }}

    steps:
      - name: React to comment
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            })

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse comment
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          CONFIG_BUNDLE_PATH=$(echo "$COMMENT_BODY" | \
            sed -E 's/.*(Github|GitHub), generate report for //g')
          echo "CONFIG_BUNDLE_PATH=$CONFIG_BUNDLE_PATH"
          ./.ci/append-to-github-output.sh "config_bundle_path" "$CONFIG_BUNDLE_PATH"

      - name: Set config and projects links
        id: set_links
        run: |
          BASE_URL="https://raw.githubusercontent.com/checkstyle/test-configs/main"
          CONFIG_BUNDLE_PATH="${{ steps.parse.outputs.config_bundle_path }}"
          CONFIG_LINK="$BASE_URL/$CONFIG_BUNDLE_PATH/config.xml"
          PROJECTS_LINK="$BASE_URL/$CONFIG_BUNDLE_PATH/list-of-projects.properties"
          echo "CONFIG_LINK=$CONFIG_LINK"
          echo "PROJECTS_LINK=$PROJECTS_LINK"
          ./.ci/append-to-github-output.sh "config_link" "$CONFIG_LINK"
          ./.ci/append-to-github-output.sh "projects_link" "$PROJECTS_LINK"

      - name: Set branch
        env:
          PULL_REQUEST_URL: ${{ github.event.issue.pull_request.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: set_branch
        run: |
          mkdir -p .ci-temp
          curl --fail-with-body -X GET "${PULL_REQUEST_URL}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -o .ci-temp/info.json

          jq --raw-output .head.ref .ci-temp/info.json > .ci-temp/branch
          jq --raw-output .head.sha .ci-temp/info.json > .ci-temp/commit_sha

          ./.ci/append-to-github-output.sh "ref" "$(cat .ci-temp/branch)"
          # shellcheck disable=SC2002
          ./.ci/append-to-github-output.sh "commit_sha" "$(cat .ci-temp/commit_sha | cut -c 1-7)"

          echo "GITHUB_OUTPUT:"
          # need to 'echo' to see output in Github CI
          # shellcheck disable=SC2005
          echo "$(cat "$GITHUB_OUTPUT")"

  make_report:
    runs-on: ubuntu-latest
    needs: parse_comment
    if: needs.parse_comment.outputs.config_link != ''
      || needs.parse_comment.outputs.projects_link != ''
    outputs:
      message: ${{ steps.out.outputs.message }}
      download_files_failed: ${{ steps.download_files.outputs.failed }}
    steps:
      - name: Download checkstyle
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Download files
        id: download_files
        env:
          DIFF_CONFIG_LINK: ${{ needs.parse_comment.outputs.config_link }}
          DIFF_PROJECTS_LINK: ${{ needs.parse_comment.outputs.projects_link }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! ./.ci/diff-report.sh download-files; then
            ./.ci/append-to-github-output.sh "failed" "true"
            exit 1
          fi

      # set main checkstyle repo as an upstream
      # Diff report will be generated taking upstream's master branch as a base branch
      - name: set upstream
        run: |
          bash
          MAIN_REPO_GIT_URL="https://github.com/checkstyle/checkstyle.git"
          git remote add upstream "$MAIN_REPO_GIT_URL"
          git fetch upstream
          FORK_REPO_GIT_URL="https://github.com/$USER_LOGIN/checkstyle.git"
          git remote add forked "$FORK_REPO_GIT_URL"
          git fetch forked

      - name: Create necessary directories
        run: |
          mkdir -p reports
          mkdir -p tmp_reports/upstream/master
          
      - name: Setup local maven cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: checkstyle-maven-cache-${{ hashFiles('**/pom.xml') }}

      # - name: Download contribution
      #   uses: actions/checkout@v4
      #   with:
      #     repository: checkstyle/contribution
      #     path: .ci-temp/contribution

      # - name: Prepare environment
      #   run: |
      #     mv .ci-temp/project.properties ./.ci-temp/contribution/checkstyle-tester/
      #     mv .ci-temp/*.xml ./.ci-temp/contribution/checkstyle-tester/
      #     sudo apt install groovy

      - name: Prepare environment
        run: |
          echo "Current working directory:"
          pwd
          
          echo "Contents of current directory:"
          ls -la
          
          echo "Contents of .ci-temp directory before any operations:"
          ls -la .ci-temp/
          
          # Instead of moving, let's just check if files exist
          if [ -f ".ci-temp/project.properties" ]; then
            echo "project.properties exists in .ci-temp/"
          else
            echo "project.properties does not exist in .ci-temp/"
          fi
          
          if ls .ci-temp/*.xml 1> /dev/null 2>&1; then
            echo "XML files exist in .ci-temp/"
          else
            echo "No XML files found in .ci-temp/"
          fi
          
          echo "Final contents of .ci-temp directory:"
          ls -la .ci-temp/
          
          if [ -f ".ci-temp/project.properties" ]; then
            echo "Contents of project.properties:"
            cat .ci-temp/project.properties
          else
            echo "Cannot display contents of project.properties as it doesn't exist"
          fi


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download DiffTool JAR
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "relentless-pursuit/test-configs"
          tag: "diff-tool-1.0.0"
          fileName: "diff-java-tool.jar"

      - name: Download patch-diff-report-tool JAR
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "checkstyle/test-configs"
          tag: "patch-diff-report-tool-0.1-SNAPSHOT"
          fileName: "patch-diff-report-tool-0.1-SNAPSHOT-jar-with-dependencies.jar"

      - name: Build Checkstyle and Generate Report
        env:
          BRANCH: ${{ needs.parse_comment.outputs.branch }}
        run: |
          # Build Checkstyle
          cd $GITHUB_WORKSPACE

          mvn -Dxml.skip=true \
              -Dpmd.skip=true \
              -Dspotbugs.skip=true \
              -Djacoco.skip=true \
              -DskipTests \
              -Dcheckstyle.skip=true \
              -Drat.skip=true \
              -Dcheckstyle.excludes="**/nocodeinfile/**/*,**/src/it/**/*,**/resources-noncompilable/**/*,**/xdocs-examples/**/*,**/src/main/java/checkstyle/src/it/**/*,**/src/main/java/checkstyle/src/it/resources-noncompilable/**/*,**/src/test/resources-noncompilable/**/*,**/test/resources/**/*,**/*Input*.java,**/*TestInput*.java,**/inputs/**/*,**/input/**/*,**/Example*.java,**/Example*.xml,**/resources/**/*.properties,**/resources/**/*.xml,**/noncompilable/**/*,**/src/main/java/checkstyle/src/it/resources-noncompilable/com/google/checkstyle/test/**/*" \
              -Dmaven.compiler.excludes="**/nocodeinfile/**/*,**/src/it/**/*,**/resources-noncompilable/**/*,**/xdocs-examples/**/*,**/src/main/java/checkstyle/src/it/**/*,**/src/main/java/checkstyle/src/it/resources-noncompilable/**/*,**/src/test/resources-noncompilable/**/*,**/test/resources/**/*,**/*Input*.java,**/*TestInput*.java,**/inputs/**/*,**/input/**/*,**/Example*.java,**/Example*.xml,**/resources/**/*.properties,**/resources/**/*.xml,**/noncompilable/**/*,**/src/main/java/checkstyle/src/it/resources-noncompilable/com/google/checkstyle/test/chapter3filestructure/**/*" \
              -e \
              --no-transfer-progress \
              --batch-mode \
              -Pno-validations \
              clean install

          # Generate report
          REF="forked/$BRANCH"
          REPO="$GITHUB_WORKSPACE"
          BASE_BRANCH="upstream/master"
          CONFIG_FILE="$GITHUB_WORKSPACE/.ci-temp/diff_config.xml"
          PROJECTS_FILE="$GITHUB_WORKSPACE/.ci-temp/project.properties"
          
          java -jar diff-java-tool.jar \
              --localGitRepo "$REPO" \
              --baseBranch "$BASE_BRANCH" \
              --patchBranch "forked/$BRANCH" \
              --config "$CONFIG_FILE" \
              --listOfProjects "$PROJECTS_FILE" \
              --allowExcludes \
              --mode "diff" \
              --extraMvnRegressionOptions "-Dmaven.test.skip=true -Dcheckstyle.skip=true -Drat.skip=true -Dmaven.javadoc.skip=true -Dpmd.skip=true -Dcpd.skip=true -Dfindbugs.skip=true -Dcobertura.skip=true -Dmaven.site.skip=true -Dmaven.jxr.skip=true -Dplexus.skip=true -Dmaven.compiler.excludes=**/resources-noncompilable/**/*,**/it/**/* -Dcheckstyle.excludes=**/resources-noncompilable/**/*,**/it/**/*"                    
                   
          # Debug output
          echo "Current directory structure:"
          find . -type d
          echo "Contents of target directory:"
          ls -la target/
          echo "Contents of reports directory:"
          ls -la reports/
          echo "Contents of tmp_reports directory:"
          ls -la tmp_reports/

      - name: Move Checkstyle report
        run: |
          if [ -f "target/checkstyle-result.xml" ]; then
            mkdir -p tmp_reports/upstream/master
            mv target/checkstyle-result.xml tmp_reports/upstream/master/
          else
            echo "checkstyle-result.xml not found in target directory"
            exit 1
          fi

      # - name: Generate report
      #   env:
      #     BRANCH: ${{ needs.parse_comment.outputs.branch }}
      #   run: |
      #     # Start from the repository root
      #     cd $GITHUB_WORKSPACE
          
      #     # Ensure we have the latest branches
      #     git fetch --all --prune
          
      #     # Set variables
      #     REF="forked/$BRANCH"
      #     REPO="$GITHUB_WORKSPACE"
      #     BASE_BRANCH="upstream/master"
          
      #     # Verify the branch exists
      #     if ! git rev-parse --verify "$REF" >/dev/null 2>&1; then
      #       echo "Error: Branch $REF does not exist!"
      #       git branch -a  # List all branches for debugging
      #       exit 1
      #     fi
          
      #     # Change to the checkstyle-tester directory
      #     cd .ci-temp/contribution/checkstyle-tester
          
      #     # Set Maven options
      #     export MAVEN_OPTS="-Xmx5g"
          
      #     # Run the appropriate Groovy command
      #     if [ -f new_module_config.xml ]; then
      #       groovy diff.groovy -r "$REPO" -p "$REF" -pc new_module_config.xml -m single \
      #         -l project.properties -xm "-Dcheckstyle.failsOnError=false" \
      #         --allowExcludes
      #     elif [ -f patch_config.xml ]; then
      #       groovy diff.groovy -r "$REPO" -b "$BASE_BRANCH" -p "$REF" -bc diff_config.xml \
      #         -pc patch_config.xml -l project.properties -xm "-Dcheckstyle.failsOnError=false" \
      #         --allowExcludes
      #     else
      #       groovy diff.groovy -r "$REPO" -b "$BASE_BRANCH" -p "$REF" -c diff_config.xml \
      #         -l project.properties -xm "-Dcheckstyle.failsOnError=false" \
      #         --allowExcludes
      #     fi

      - name: Copy Report to AWS S3 Bucket
        run: |
          bash
          TIME=$(date +%Y%H%M%S)
          FOLDER="${{needs.parse_comment.outputs.commit_sha}}_$TIME"
          DIFF="./.ci-temp/contribution/checkstyle-tester/reports/diff"
          LINK="https://${{env.AWS_BUCKET_NAME}}.s3.${{env.AWS_REGION}}.amazonaws.com"
          aws s3 cp $DIFF "s3://${{env.AWS_BUCKET_NAME}}/$FOLDER/reports/diff/" --recursive
          if [ -n "$LABEL" ]; then
            echo "$LABEL: " > .ci-temp/message
          fi
          echo "$LINK/$FOLDER/reports/diff/index.html" >> .ci-temp/message

      - name: Set output
        id: out
        run: |
          ./.ci/append-to-github-output.sh "message" "$(cat .ci-temp/message)"

  add_sad_emoji:
    needs: [check_pr_status, parse_comment, make_report]
    if: cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Add sad emoji
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });

  # should be always last step
  send_message:
    runs-on: ubuntu-latest
    needs: [ check_pr_status, parse_comment, make_report ]
    if: failure() || success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get message
        env:
          MSG: ${{ needs.make_report.outputs.message }}
          DOWNLOAD_FAILED: ${{ needs.make_report.outputs.download_files_failed }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .ci-temp
          JOBS_LINK="https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}"
          if [ "$DOWNLOAD_FAILED" == "true" ]; then
            echo "Report generation failed. Please use 'GitHub, generate report for" \
                 "check_name/example_type'<br>Link: $JOBS_LINK" > .ci-temp/message
          elif [ -z "$MSG" ]; then
            API_LINK="https://api.github.com/repos/checkstyle/checkstyle/actions/runs/"
            API_LINK="${API_LINK}${{github.run_id}}/jobs"

            curl --fail-with-body -X GET "${API_LINK}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -o .ci-temp/info.json

            jq '.jobs' .ci-temp/info.json > ".ci-temp/jobs"
            jq '.[] | select(.conclusion == "failure") | .name' .ci-temp/jobs > .ci-temp/job_name
            jq '.[] | select(.conclusion == "failure") | .steps' .ci-temp/jobs > .ci-temp/steps
            jq '.[] | select(.conclusion == "failure") | .name' .ci-temp/steps > .ci-temp/step_name
            echo "Report generation failed on phase $(cat .ci-temp/job_name)," > .ci-temp/message
            echo "step $(cat .ci-temp/step_name).<br>Link: $JOBS_LINK" >> .ci-temp/message
          else
            echo "$MSG" > .ci-temp/message
          fi

      - name: Set message
        id: out
        run: |
          ./.ci/append-to-github-output.sh "message" "$(cat .ci-temp/message)"

      - name: Comment PR
        uses: checkstyle/contribution/comment-action@master
        with:
          message: ${{steps.out.outputs.message}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
